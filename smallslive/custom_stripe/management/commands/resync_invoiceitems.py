# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-08-03 02:27
from __future__ import (
    absolute_import, division, print_function, unicode_literals
)

import datetime
import sys
import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.core import serializers
from django.db import migrations, models
from django.db.models.deletion import SET_NULL
from django.db.utils import IntegrityError
from django.core.management.base import BaseCommand, CommandError
from django.utils import six
from django.utils.timezone import utc
import djstripe.fields
from stripe.error import InvalidRequestError
from tqdm import tqdm


DJSTRIPE_SUBSCRIBER_MODEL = getattr(settings, "DJSTRIPE_SUBSCRIBER_MODEL", settings.AUTH_USER_MODEL)

def resync_invoiceitems():
    """
    Since invoiceitem IDs were not previously stored (the ``stripe_id`` field held the id of the linked subsription),
    a direct migration will leave us with a bunch of orphaned objects. It was decided
    [here](https://github.com/kavdev/dj-stripe/issues/162) that a purge and re-sync would be the best option for
    subscriptions. That's being extended to InvoiceItems. No data that is currently available on stripe will be
    deleted. Anything stored locally will be purged.
    """

    # This is okay, since we're only doing a forward migration.
    from djstripe.models import InvoiceItem

    from djstripe.context_managers import stripe_temporary_api_version

    with stripe_temporary_api_version("2016-03-07"):
        if InvoiceItem.objects.count():
            # print("Purging invoiceitems. Don't worry, all invoiceitems will be re-synced from stripe. Just in case you \
            # didn't get the memo, we'll print out a json representation of each object for your records:")
            # print(serializers.serialize("json", InvoiceItem.objects.all()))
            InvoiceItem.objects.all().delete()

            print("Re-syncing invoiceitems. This may take a while.")

            for stripe_invoiceitem in tqdm(iterable=InvoiceItem.api_list(), desc="Sync", unit=" invoiceitems"):
                print(stripe_invoiceitem)
                invoice = InvoiceItem.sync_from_stripe_data(stripe_invoiceitem)

                if not invoice.customer:
                    tqdm.write("The customer for this invoiceitem ({invoiceitem_id}) does not exist \
                    locally (so we won't sync the invoiceitem). You'll want to figure out how that \
                    happened.".format(invoiceitem_id=stripe_invoiceitem['id']))

            print("InvoiceItem re-sync complete.")

class Command(BaseCommand):
    help = 'djstripe resync invoiceitems data'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Starting resync djstripe invoiceitems'))
        resync_invoiceitems()
        self.stdout.write(self.style.SUCCESS('Successfully resynced djstripe invoiceitems'))